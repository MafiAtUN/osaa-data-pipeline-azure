# Azure DevOps Pipeline for OSAA MVP
# This replaces GitHub Actions with Azure-native CI/CD

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - .gitignore

pr:
  branches:
    include:
      - main

variables:
  # Container registry service connection
  containerRegistry: 'osaadatapipelineacr'
  imageRepository: 'osaa-data-pipeline'
  containerRegistryUrl: '$(containerRegistry).azurecr.io'
  imageTag: '$(Build.BuildId)'
  azureSubscription: 'osaa-data-pipeline-service-connection'
  resourceGroupName: 'osaa-data-pipeline'
  containerName: 'osaa-data-pipeline'
  location: 'eastus2'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: '$(Build.SourcesDirectory)/dockerfile'
        containerRegistry: $(containerRegistry)
        tags: |
          $(imageTag)
          latest

    - task: AzureCLI@2
      displayName: 'Test Azure connectivity'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Test Azure Blob Storage connectivity
          python test_azure_credentials.py

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Instances'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Deploy to Azure Container Instances
                az container create \
                  --resource-group $(resourceGroupName) \
                  --name $(containerName) \
                  --image $(containerRegistryUrl)/$(imageRepository):$(imageTag) \
                  --cpu 2 \
                  --memory 4 \
                  --registry-login-server $(containerRegistryUrl) \
                  --registry-username $(containerRegistry) \
                  --registry-password $(AZURE_ACR_PASSWORD) \
                  --dns-name-label osaa-mvp-azure \
                  --ports 8080 \
                  --environment-variables \
                    AZURE_STORAGE_CONTAINER_NAME=$(AZURE_STORAGE_CONTAINER_NAME) \
                    ENABLE_AZURE_UPLOAD=true \
                    TARGET=prod \
                    GATEWAY=local \
                    DB_PATH=/app/sqlMesh/unosaa_data_pipeline.db \
                    UI_PORT=8080 \
                  --secure-environment-variables \
                    AZURE_STORAGE_CONNECTION_STRING=$(AZURE_STORAGE_CONNECTION_STRING) \
                    AZURE_CLIENT_ID=$(AZURE_CLIENT_ID) \
                    AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET) \
                    AZURE_TENANT_ID=$(AZURE_TENANT_ID) \
                    AZURE_STORAGE_ACCOUNT_NAME=$(AZURE_STORAGE_ACCOUNT_NAME)

          - task: AzureCLI@2
            displayName: 'Run ETL Pipeline'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Run the ETL pipeline
                az container exec \
                  --resource-group $(resourceGroupName) \
                  --name $(containerName) \
                  --exec-command "/app/entrypoint.sh etl"

- stage: QA
  displayName: QA Testing
  dependsOn: Build
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: QATest
    displayName: QA Test
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Run QA Tests'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Build and test the container
          docker build -t osaa-mvp-test .
          
          # Run dry-run tests
          docker run --name osaa-mvp-test \
            -e AZURE_STORAGE_CONTAINER_NAME=$(AZURE_STORAGE_CONTAINER_NAME) \
            -e ENABLE_AZURE_UPLOAD=true \
            -e TARGET=qa \
            -e GATEWAY=local \
            -e DRY_RUN_FLG=true \
            osaa-mvp-test transform_dry_run
          
          # Check test results
          docker logs osaa-mvp-test
          docker rm osaa-mvp-test
